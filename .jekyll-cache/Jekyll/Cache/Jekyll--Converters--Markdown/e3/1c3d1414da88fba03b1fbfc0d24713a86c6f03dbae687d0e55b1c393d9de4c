I"IF<h1 id="classifiers-visión-general">Classifiers Visión General</h1>

<p>Google Earth Engine ofrece a los usuarios la oportunidad de realizar muchos análisis avanzados, como la spectral un-mixing, object-based methods, eigen analysis and linear modeling.  También se dispone de técnicas de machine learning para la clasificación supervisada y no supervisada. En este ejemplo, utilizaremos la clasificación supervisada para la clasificación de la cobertura terrestre.</p>

<p>El propósito es obtener un mapa clasificado de la cobertura terrestre en un área de interés. Examinaremos las imágenes Landsat e identificaremos manualmente un conjunto de puntos de entrenamiento para tres clases (agua, bosque, urbano). Luego usaremos esos puntos para entrenar un clasificador. El algorítmo se utilizará para clasificar el resto de la imagen Landsat en esas tres categorías. Finalmente, podremos evaluar la precisión de nuestra clasificación usando <code class="language-plaintext highlighter-rouge">classifier.confusionMatrix()</code>.</p>

<p>Enlace al código completo que usaremos en esta sesión:
<a href="https://code.earthengine.google.com/84027208bf2a94e77b5f14075fc5a938">https://code.earthengine.google.com/84027208bf2a94e77b5f14075fc5a938</a></p>

<p><em>Adaptado de <a href="https://developers.google.com/earth-engine/classification">Earth Engine 201 Intermediate workshop</a></em></p>

<h1 id="ejercicio-clasificar-la-cobertura-del-suelo-usando-las-imágenes-landsat">Ejercicio: Clasificar la cobertura del suelo usando las imágenes Landsat</h1>

<h3 id="delimitar-un-área-de-interés-roi-a-partir-de-coordenadas">Delimitar un área de interés (ROI) a partir de coordenadas</h3>

<p>Primero, necesitamos definir una región de interés (ROI). En lugar de utilizar un Asset importado, utilizaremos una única coordenada que definiremos manualmente. Estamos interesado en hacer una clasificación alrededor de Houston, así que usaré el centro de la ciudad como mi lat/lon.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Define a region of interest as a point.  Change the coordinates</span>
<span class="c1">// to select an ROI in your area of interest.</span>
<span class="c1">// You can use the inspector tool to find your coordinates</span>
<span class="kd">var</span> <span class="nx">roi</span> <span class="o">=</span> <span class="nx">ee</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">Point</span><span class="p">(</span><span class="o">-</span><span class="mf">95.6223</span><span class="p">,</span> <span class="mf">29.7381</span><span class="p">);</span></code></pre></figure>

<h3 id="cargar-una-imagecollection-ya-filtrarla-para-obtener-una-sola-imágen">Cargar una <code class="language-plaintext highlighter-rouge">ImageCollection</code> ya filtrarla para obtener una sola imágen</h3>

<p>Ahora cargaremos las imágenes de Landsat y filtraremos el área y las fechas de interés.  Podemos usar <code class="language-plaintext highlighter-rouge">sort</code> para filtrar la <code class="language-plaintext highlighter-rouge">ImageCollection</code> por el % de cobertura de nubes, una propiedad incluida en la Landsat Top of Atmosphere (TOA) collection. Luego seleccionamos la <code class="language-plaintext highlighter-rouge">first</code> (menos nubosa) <code class="language-plaintext highlighter-rouge">Image</code> de la “Colección de Imágenes” clasificada.
Now we will load Landsat imagery and filter to the area and dates of interest.  We can use <code class="language-plaintext highlighter-rouge">sort</code> to filter the <code class="language-plaintext highlighter-rouge">ImageCollection</code> by % cloud cover, a property included with the Landsat Top of Atmosphere (TOA) collection. We then select the <code class="language-plaintext highlighter-rouge">first</code> (least cloudy) <code class="language-plaintext highlighter-rouge">Image</code> from the sorted <code class="language-plaintext highlighter-rouge">ImageCollection</code> .</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Load the Landsat 8 scaled radiance image collection.</span>
<span class="kd">var</span> <span class="nx">landsatCollection</span> <span class="o">=</span> <span class="nx">ee</span><span class="p">.</span><span class="nx">ImageCollection</span><span class="p">(</span><span class="dl">'</span><span class="s1">LANDSAT/LC08/C01/T1</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">filterDate</span><span class="p">(</span><span class="dl">'</span><span class="s1">2017-01-01</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">2017-12-31</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">// Make a cloud-free composite.</span>
<span class="kd">var</span> <span class="nx">composite</span> <span class="o">=</span> <span class="nx">ee</span><span class="p">.</span><span class="nx">Algorithms</span><span class="p">.</span><span class="nx">Landsat</span><span class="p">.</span><span class="nx">simpleComposite</span><span class="p">({</span>
  <span class="na">collection</span><span class="p">:</span> <span class="nx">landsatCollection</span><span class="p">,</span>
  <span class="na">asFloat</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">});</span>

<span class="c1">// Visualize the Composite</span>
<span class="nb">Map</span><span class="p">.</span><span class="nx">addLayer</span><span class="p">(</span><span class="nx">composite</span><span class="p">,</span> <span class="p">{</span><span class="na">bands</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">B4</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">B3</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">B2</span><span class="dl">'</span><span class="p">],</span> <span class="na">max</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="na">gamma</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> <span class="dl">'</span><span class="s1">L8 Image</span><span class="dl">'</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span></code></pre></figure>

<h3 id="seleccionar-la-data-de-entrenamiento">Seleccionar la data de entrenamiento</h3>

<p>The second step is to collect training data.  Using the imagery as guidance, hover over the ‘Geometry Imports’ box next to the geometry drawing tools and click ‘+ new layer.’  Each new layer represents one class within the training data. Let the first new layer represent ‘urban.’  Locate points in the new layer in urban or built up areas (buildings, roads, parking lots, etc.).  When finished collecting points, click ‘Exit’ and configure the import (top of the script) as follows.  Name the layer ‘urban’ and click the  icon to configure it.  ‘Import as’ <code class="language-plaintext highlighter-rouge">FeatureCollection</code>.  ‘Add property’ landcover and set its value to 0.  (Subsequent classes will be 1 for water, 2 for forest, etc.)  when finished, click ‘OK’ as shown:</p>

<p><br />
<img src="../fig/03_geomConfig.png" border="10" width="50%" height="50%" />
<br /><br /></p>

<p>When you are finished making a <code class="language-plaintext highlighter-rouge">FeatureCollection</code> for each class (3 total), you now can merge them into one <code class="language-plaintext highlighter-rouge">FeatureCollection</code> using <code class="language-plaintext highlighter-rouge">featureCollection.merge()</code>. This will convert them into one collection in which the property <strong>landcover</strong> has a value that is the class (0, 1, 2).</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Merge points together</span>
<span class="kd">var</span> <span class="nx">newfc</span> <span class="o">=</span> <span class="nx">water</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span><span class="nx">urban</span><span class="p">).</span><span class="nx">merge</span><span class="p">(</span><span class="nx">forest</span><span class="p">);</span>
<span class="nx">print</span><span class="p">(</span><span class="nx">newfc</span><span class="p">,</span> <span class="dl">'</span><span class="s1">newfc</span><span class="dl">'</span><span class="p">)</span></code></pre></figure>

<p>The print statement will display the new collection in the <strong>Console</strong>.</p>

<h3 id="realizar-el-muestreo-de-la-imágen-usando-puntos-de-entrenamiento">Realizar el muestreo de la imágen usando puntos de entrenamiento</h3>

<p>Now that you have created the points and labels, you need to sample the Landsat 8 imagery using <code class="language-plaintext highlighter-rouge">image.sampleRegions()</code>. This command will extract the reflectance in the designated bands for each of the points you have created. A conceptual diagram of this is shown in the image below. We will use reflectance from the optical, NIR, and SWIR bands (B2 - B7).</p>

<p><br />
<img src="../fig/03_classificationsample.png" border="10" width="30%" height="30%" />
<br /><br /></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Select the bands for training</span>
<span class="kd">var</span> <span class="nx">bands</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">B2</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">B3</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">B4</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">B5</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">B6</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">B7</span><span class="dl">'</span><span class="p">];</span>

<span class="c1">// Sample the input imagery to get a FeatureCollection of training data.</span>
<span class="kd">var</span> <span class="nx">training</span> <span class="o">=</span> <span class="nx">composite</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">bands</span><span class="p">).</span><span class="nx">sampleRegions</span><span class="p">({</span>
  <span class="na">collection</span><span class="p">:</span> <span class="nx">newfc</span><span class="p">,</span>
  <span class="na">properties</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">landcover</span><span class="dl">'</span><span class="p">],</span>
  <span class="na">scale</span><span class="p">:</span> <span class="mi">30</span>
<span class="p">});</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">FeatureCollection</code> called <strong>training</strong> has the reflectance value from each band stored for every training point along with its class label.</p>

<h3 id="entrenar-el-clasificador">Entrenar el clasificador</h3>
<p>We will now instantiate a <code class="language-plaintext highlighter-rouge">classifier</code> using <code class="language-plaintext highlighter-rouge">ee.Classifier.randomForest()</code> and <code class="language-plaintext highlighter-rouge">train</code> it on the training data specifying the features to use (training), the landcover categories as the <code class="language-plaintext highlighter-rouge">classProperty</code> we want to categorize the imagery into, and the reflectance in B2 - B7 of the Landsat imagery as the <code class="language-plaintext highlighter-rouge">inputProperties</code>.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Make a Random Forest classifier and train it.</span>
<span class="kd">var</span> <span class="nx">classifier</span> <span class="o">=</span> <span class="nx">ee</span><span class="p">.</span><span class="nx">Classifier</span><span class="p">.</span><span class="nx">randomForest</span><span class="p">().</span><span class="nx">train</span><span class="p">({</span>
  <span class="na">features</span><span class="p">:</span> <span class="nx">training</span><span class="p">,</span>
  <span class="na">classProperty</span><span class="p">:</span> <span class="dl">'</span><span class="s1">landcover</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">inputProperties</span><span class="p">:</span> <span class="nx">bands</span>
<span class="p">});</span></code></pre></figure>

<p>Other classifiers, including Support Vector Machines (SVM) and Classification and Regression Trees (CART) are available in Earth Engine. See the <a href="https://developers.google.com/earth-engine/classification">Supervised Classification User Guide</a> for more examples.</p>

<h3 id="clasificar-la-imágen-y-plotear-los-resultados">Clasificar la imágen y plotear los resultados</h3>

<p>Use the new <code class="language-plaintext highlighter-rouge">classifier</code> to classify the rest of the imagery.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Classify the input imagery.</span>
<span class="kd">var</span> <span class="nx">classified</span> <span class="o">=</span> <span class="nx">composite</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">bands</span><span class="p">).</span><span class="nx">classify</span><span class="p">(</span><span class="nx">classifier</span><span class="p">);</span>

<span class="c1">// Define a palette for the Land Use classification.</span>
<span class="kd">var</span> <span class="nx">palette</span> <span class="o">=</span> <span class="p">[</span>
  <span class="dl">'</span><span class="s1">D3D3D3</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// urban (0)  // grey</span>
  <span class="dl">'</span><span class="s1">0000FF</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// water (1)  // blue</span>
  <span class="dl">'</span><span class="s1">008000</span><span class="dl">'</span> <span class="c1">//  forest (2) // green</span>
<span class="p">];</span>

<span class="c1">// Display the classification result and the input image.</span>
<span class="nb">Map</span><span class="p">.</span><span class="nx">setCenter</span><span class="p">(</span><span class="o">-</span><span class="mf">96.0171</span><span class="p">,</span> <span class="mf">29.6803</span><span class="p">);</span>
<span class="nb">Map</span><span class="p">.</span><span class="nx">addLayer</span><span class="p">(</span><span class="nx">classified</span><span class="p">,</span> <span class="p">{</span><span class="na">min</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">palette</span><span class="p">:</span> <span class="nx">palette</span><span class="p">},</span> <span class="dl">'</span><span class="s1">Land Use Classification</span><span class="dl">'</span><span class="p">);</span></code></pre></figure>

<p>You should get an image that looks sort of like the one below. Pan around the map and use the inspector to and see how you did!</p>

<p><br />
<img src="../fig/03_classified.png" border="10" width="100%" height="100%" />
<br /><br /></p>

<h3 id="evaluar-la-precisión">Evaluar la precisión</h3>

<p>We can assess the accuracy of the trained <code class="language-plaintext highlighter-rouge">classifier</code> using a <code class="language-plaintext highlighter-rouge">confusionMatrix</code>.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Get a confusion matrix representing resubstitution accuracy.</span>
<span class="nx">print</span><span class="p">(</span><span class="dl">'</span><span class="s1">RF error matrix: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">classifier</span><span class="p">.</span><span class="nx">confusionMatrix</span><span class="p">());</span>
<span class="nx">print</span><span class="p">(</span><span class="dl">'</span><span class="s1">RF accuracy: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">classifier</span><span class="p">.</span><span class="nx">confusionMatrix</span><span class="p">().</span><span class="nx">accuracy</span><span class="p">());</span></code></pre></figure>

<p>Word of warning: In this particular example, we are just looking at the <code class="language-plaintext highlighter-rouge">trainAccuracy</code>, which basically describes how well the <code class="language-plaintext highlighter-rouge">classifier</code> was able to correctly label resubstituted training data, i.e. data the <code class="language-plaintext highlighter-rouge">classifier</code> had already seen. To get a true validation accurcay, we need to show the classifier new ‘testing’ data. The repository code has a bonus section at the end that holds out data for testing, applies the classifier to the testing data and assesses the <code class="language-plaintext highlighter-rouge">errorMatrix</code> for this withheld validation data. The last example in the <a href="https://developers.google.com/earth-engine/classification">Supervised Classification User Guide</a> also gives example code for this process.</p>
:ET