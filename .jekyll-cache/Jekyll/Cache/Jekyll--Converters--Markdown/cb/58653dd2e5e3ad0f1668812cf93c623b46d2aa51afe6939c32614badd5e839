I"xU<p>Link to a static version of the full script used in this module:
<a href="https://code.earthengine.google.com/269a0d4a6b9854e6f81ac87187a72559">https://code.earthengine.google.com/269a0d4a6b9854e6f81ac87187a72559</a></p>

<h1 id="reductores-descripción-general">Reductores: Descripción general</h1>

<p>En Google Earth Engine (GEE), <a href="https://developers.google.com/earth-engine/reducers_intro">reducers</a> se utilizan para agregar datos en el tiempo, el espacio y otras estructuras de datos. Pertenecen a la clase <code class="language-plaintext highlighter-rouge">ee.Reducer</code> e incluyen estadísticas de resumen, histogramas y regresión lineal, entre otros. Aquí se presenta una demostración visual que muestra un reductor aplicado a una <code class="language-plaintext highlighter-rouge">ImageCollection</code>:</p>

<p><br />
<img src="../fig/04_reducers.png" border="10" />
<br /><br /></p>

<p>Las reducciones también pueden ocurrir en el espacio, sobre las bandas dentro de una imagen, o sobre los atributos de una <code class="language-plaintext highlighter-rouge">FeatureCollection</code>. Ver el <a href="https://developers.google.com/earth-engine/reducers_intro">Reducer Overview</a> en la Guía del Desarrollador de Google para más información.</p>

<p>In Episode 3: Accessing Satellite Imagery, we used a vector boundary and date range to filter an image collection, mapped an algorithm (NDVI) over that collection, and then reduced that collection to one image in which each pixel value was its maximum NDVI. Here we follow the same workflow, but instead reduce using <code class="language-plaintext highlighter-rouge">imageCollection.sum()</code> to calculate total annual precipitation for each pixel in the US (temporal reducers). We then take it a step further and use the spatial reducer ‘reduceRegions’ to calculate total annual precip for each US county.
En el Episodio 3: Accediendo al Catálogo de Imágenes de Satélite, usamos un límite vectorial y un rango de fechas para filtrar una colección de imágenes, aplicamos un algoritmo (NDVI) sobre esa colección, y luego la redujimos a una imagen en la que cada valor de píxel era su máximo NDVI. Aquí seguimos el mismo flujo de trabajo, pero en su lugar reduciremos usando <code class="language-plaintext highlighter-rouge">imageCollection.sum()</code> para calcular la precipitación anual total para cada píxel en los EE.UU. (reductores temporales). Luego daremos un paso más y usaremos el reductor espacial ‘reduceRegions’ para calcular la precipitación anual total para cada condado de los EE.UU.</p>

<h1 id="ejercicio-obtener-datos-climáticos-desde-gee">Ejercicio: Obtener datos climáticos desde GEE</h1>
<p>Here, we will demonstrate a temporal reducer and a spatial reducer by obtaining data on annual precipitation by US county.</p>

<h3 id="el-catálogo-de-datos-de-gee">El catálogo de datos de GEE</h3>
<p>A secondary objective to this exercise is to use GEE to access common datasets stored in the data archive that may appeal to those not directly interested in remote sensing applications. As described in the <a href="https://geohackweek.github.io/GoogleEarthEngine/01-introduction/">Introduction</a>, GEE has co-located a number of datasets relevant to earth systems analyses. The full archive can be browsed <a href="https://code.earthengine.google.com/datasets/">here</a>. In this exercise, we will use the <a href="https://code.earthengine.google.com/dataset/IDAHO_EPSCOR/GRIDMET">GRIDMET Meteorological Dataset</a> to obtain precipitation. Briefly, GRIDMET blends PRISM and NLDAS to produce a daily, 4 km gridded climate dataset for the contiguous United States from 1979 - present.</p>

<h3 id="temporal-reducer-generar-un-image-statistics-en-el-tiempo">Temporal Reducer: Generar un Image Statistics en el tiempo</h3>
<p>As discussed in <a href="https://geohackweek.github.io/GoogleEarthEngine/03-load-imagery/">Accessing Satellite Imagery</a>, an <code class="language-plaintext highlighter-rouge">ImageCollection</code> is a stack or time series of images. Reducers are used to derive a single <code class="language-plaintext highlighter-rouge">Image</code> based on the <code class="language-plaintext highlighter-rouge">ImageCollection</code>. Operations occur on a per pixel basis. We will follow this workflow:</p>

<ul>
  <li>“Load” the GRIDMET data as an <code class="language-plaintext highlighter-rouge">ImageCollection</code></li>
  <li>Filter for the precipitation data band and dates desired</li>
  <li><strong>Reduce</strong> 365 “raster” images of daily precipitation into one raster image of annual precipitation totals (aka sum rasters by pixel)</li>
  <li>Visualize the result</li>
</ul>

<h4 id="cargar-y-filtrar-una-imagecollection">Cargar y filtrar una ImageCollection</h4>
<p>First, we need to identify the <strong>ImageCollection ID</strong> for the GRIDMET data product and the <strong>band name</strong> for the precipitation data (and check any relevant metadata). You can find this either in the <a href="https://code.earthengine.google.com/datasets/">data catalog</a> or directly in the <a href="https://code.earthengine.google.com/">GEE Code Editor</a> at the top above  the center panel.</p>

<p>From the <a href="https://code.earthengine.google.com/dataset/IDAHO_EPSCOR/GRIDMET">GRIDMET description</a>, we know the ImageCollection ID = ‘IDAHO_EPSCOR/GRIDMET’ and the precipitation band name is ‘pr’. We will specifically <code class="language-plaintext highlighter-rouge">select</code> this band only.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// load precip data (mm, daily total): 365 images per year</span>
<span class="kd">var</span> <span class="nx">precipCollection</span> <span class="o">=</span> <span class="nx">ee</span><span class="p">.</span><span class="nx">ImageCollection</span><span class="p">(</span><span class="dl">'</span><span class="s1">IDAHO_EPSCOR/GRIDMET</span><span class="dl">'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="dl">'</span><span class="s1">pr</span><span class="dl">'</span><span class="p">)</span>   <span class="c1">// select  precip band only</span>
                    <span class="p">.</span><span class="nx">filterDate</span><span class="p">(</span><span class="dl">'</span><span class="s1">2017-01-01</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">2017-12-31</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">print</span><span class="p">(</span><span class="nx">precipCollection</span><span class="p">,</span> <span class="dl">'</span><span class="s1">precipCollection</span><span class="dl">'</span><span class="p">);</span></code></pre></figure>

<p>By printing the resulting collection to the Console, we can see we’ve accessed 365 images, each with 1 band named ‘pr’.</p>

<h4 id="aplicar-un-sum-reducer-y-visualizar-los-resultados">Aplicar un Sum Reducer y visualizar los resultados</h4>
<p>The <code class="language-plaintext highlighter-rouge">imageCollection.reduce()</code> operator allows you to apply any function of class <code class="language-plaintext highlighter-rouge">ee.Reducer()</code> to all images in the collection. If your <code class="language-plaintext highlighter-rouge">ImageCollection</code> had multiple bands, the reducer is applied separately to all bands (unless the reducer uses multiple bands as inputs, in which case the number of bands in the image collection must match the number of inputs required by the reducer). You can find available reducers and their descriptions in the searchable API reference under the <strong>Docs</strong> tab in the upper left panel of the code editor.</p>

<p><br />
<img src="../fig/04_reducerMenu.PNG" border="10" />
<br /><br /></p>

<p>Some commonly used reducers have shortcut syntax, such as <code class="language-plaintext highlighter-rouge">imageCollection.mean()</code>, <code class="language-plaintext highlighter-rouge">imageCollection.min()</code>, and conveniently, <code class="language-plaintext highlighter-rouge">imageCollection.sum()</code>. Both syntaxes are demonstrated in the following code chunk.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// load precip data (mm, daily total): 365 images per year</span>
<span class="kd">var</span> <span class="nx">precipCollection</span> <span class="o">=</span> <span class="nx">ee</span><span class="p">.</span><span class="nx">ImageCollection</span><span class="p">(</span><span class="dl">'</span><span class="s1">IDAHO_EPSCOR/GRIDMET</span><span class="dl">'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="dl">'</span><span class="s1">pr</span><span class="dl">'</span><span class="p">)</span>   <span class="c1">// select  precip band only</span>
                    <span class="p">.</span><span class="nx">filterDate</span><span class="p">(</span><span class="dl">'</span><span class="s1">2017-01-01</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">2017-12-31</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">print</span><span class="p">(</span><span class="nx">precipCollection</span><span class="p">);</span>  

<span class="c1">// reduce the image collection to one image by summing the 365 daily rasters</span>
<span class="kd">var</span> <span class="nx">annualPrecip</span> <span class="o">=</span> <span class="nx">precipCollection</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">ee</span><span class="p">.</span><span class="nx">Reducer</span><span class="p">.</span><span class="nx">sum</span><span class="p">());</span>
<span class="nx">print</span><span class="p">(</span><span class="nx">annualPrecip</span><span class="p">);</span>

<span class="c1">// equivalent shortcut syntax</span>
<span class="kd">var</span> <span class="nx">annualPrecip2</span> <span class="o">=</span> <span class="nx">precipCollection</span><span class="p">.</span><span class="nx">sum</span><span class="p">();</span>

<span class="c1">// visualize annual precipitation</span>
<span class="kd">var</span> <span class="nx">precipPal</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">white</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">]</span> <span class="c1">// store palette as variable               </span>
<span class="nb">Map</span><span class="p">.</span><span class="nx">addLayer</span><span class="p">(</span><span class="nx">annualPrecip</span><span class="p">,</span> <span class="p">{</span><span class="na">min</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="na">palette</span><span class="p">:</span> <span class="nx">precipPal</span><span class="p">},</span> <span class="dl">'</span><span class="s1">precip</span><span class="dl">'</span><span class="p">);</span></code></pre></figure>

<p>By printing the resulting image to the Console, we can see we now have 1 image with 1 band named ‘pr_sum’. Here’s what it looks like:</p>

<p><br />
<img src="../fig/04_annualPrecipMap.PNG" border="10" />
<br /><br /></p>

<h3 id="spatial-reducer-generar-un-image-statistics-por-regiones">Spatial Reducer: Generar un Image Statistics por regiones</h3>
<p>Now let’s take the image of annual precipitation we just created and get the mean annual precipitation by county in the United States. To get image statistics for multiple regions, we can use an <a href="https://developers.google.com/earth-engine/reducers_reduce_regions">image.reduceRegions()</a> call. We will use a <a href="https://developers.google.com/earth-engine/feature_collections">FeatureCollection</a> to store our vector dataset of counties. Note that there is also a <a href="https://developers.google.com/earth-engine/reducers_reduce_region">image.reduceRegion()</a> operator if you wanted to summarize one polygon region only. The result of the <code class="language-plaintext highlighter-rouge">reduceRegions()</code> operation is added to the properties of each feature in the <code class="language-plaintext highlighter-rouge">FeatureCollection</code>.</p>

<blockquote>
  <p>*An important note on the scale parameter**</p>
</blockquote>

<blockquote>
  <p>GEE uses lazy code evaluation that only executes parts of your script needed for results - in the case of the JavaScript API code editor environment, that means things needed to fulfill print statements, map visualizations, or export tasks. <em>GEE will run your computations at the resolution of your current map view in the code editor unless you tell it otherwise.</em> Whenever possible, explicitly set the scale arguments to force GEE to work in a scale that makes sense for your imagery/analysis. Read the <a href="https://en.wikipedia.org/wiki/Modifiable_areal_unit_problem">modifiable areal unit problem</a> wiki or the <a href="https://developers.google.com/earth-engine/scale">Developers Docs</a> to see why this matters.</p>
</blockquote>

<h4 id="cargar-los-límites-de-países-data-vectorial">Cargar los límites de países (Data Vectorial)</h4>

<p>There are four ways to obtain vector data in GEE as discussed in <a href="https://geohackweek.github.io/GoogleEarthEngine/03-load-imagery/">03 Accessing Satellite Imagery</a>. Here, we will use an <a href="https://fusiontables.google.com/data?docid=1xdysxZ94uUFIit9eXmnw1fYc6VcQiXhceFd_CVKa#map:id=2">existing public fusion table of county boundaries</a> from the US Census Bureau.</p>

<p>This dataset includes entities outside of the contiguous US such as Alaska, Puerto Rico, and American Samoa. We will remove these based on their unique ID’s in a property attribute containing “state” FIPS codes to demonstrate vector filtering.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// load regions: counties from a public fusion table, removing non-conus states</span>
<span class="c1">// by using a custom filter</span>
<span class="kd">var</span> <span class="nx">nonCONUS</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">60</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">69</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">78</span><span class="p">]</span> <span class="c1">// state FIPS codes that we don't want</span>
<span class="kd">var</span> <span class="nx">counties</span> <span class="o">=</span> <span class="nx">ee</span><span class="p">.</span><span class="nx">FeatureCollection</span><span class="p">(</span><span class="dl">'</span><span class="s1">ft:1ZMnPbFshUI3qbk9XE0H7t1N5CjsEGyl8lZfWfVn4</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">ee</span><span class="p">.</span><span class="nx">Filter</span><span class="p">.</span><span class="nx">inList</span><span class="p">(</span><span class="dl">'</span><span class="s1">STATEFP</span><span class="dl">'</span><span class="p">,</span><span class="nx">nonCONUS</span><span class="p">).</span><span class="nx">not</span><span class="p">());</span>
<span class="nx">print</span><span class="p">(</span><span class="nx">counties</span><span class="p">,</span> <span class="dl">'</span><span class="s1">counties</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">// visualize</span>
<span class="nb">Map</span><span class="p">.</span><span class="nx">addLayer</span><span class="p">(</span><span class="nx">counties</span><span class="p">,{},</span><span class="dl">'</span><span class="s1">counties</span><span class="dl">'</span><span class="p">);</span>  </code></pre></figure>

<p>By printing the county featureCollection, we see there are 3108 county polygons and 11 columns of attribute data.</p>

<p><br />
<img src="../fig/04_countyMap.png" border="10" />
<br /><br /></p>

<h4 id="aplicar-el-spatial-reducer">Aplicar el spatial reducer</h4>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// get mean precipitation values by county polygon</span>
<span class="kd">var</span> <span class="nx">countyPrecip</span> <span class="o">=</span> <span class="nx">annualPrecip</span><span class="p">.</span><span class="nx">reduceRegions</span><span class="p">({</span>
  <span class="na">collection</span><span class="p">:</span> <span class="nx">counties</span><span class="p">,</span>
  <span class="na">reducer</span><span class="p">:</span> <span class="nx">ee</span><span class="p">.</span><span class="nx">Reducer</span><span class="p">.</span><span class="nx">mean</span><span class="p">(),</span>
  <span class="na">scale</span><span class="p">:</span> <span class="mi">4000</span> <span class="c1">// the resolution of the GRIDMET dataset</span>
<span class="p">});</span>
<span class="nx">print</span><span class="p">(</span><span class="nx">countyPrecip</span><span class="p">);</span></code></pre></figure>

<p>By printing the countyPrecip featureCollection, we see there are 3108 county polygons and now 12 columns of attribute data, with the addition of the “mean” column.</p>

<h3 id="acondicionar-los-resultados-para-exportarlos">Acondicionar los resultados para exportarlos</h3>
<p>GEE can export tables in CSV (default), GeoJSON, KML, or KMZ. Here, we do a little formatting to prepare our FeatureCollection for export as a CSV.</p>

<p>Formatting includes:</p>

<ul>
  <li>removing the .geo column for a tidier dataset (this column can get quite large when polygons are highly detailed, but there’s no reason that you have to do this step)</li>
  <li>Adding a Column Attribute for the year of the precip data to demonstrate attribute manipulation. This can only be done to Features, so we map a function to do this over the features within the Feature Collection</li>
</ul>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// drop .geo column (not needed if goal is tabular data)</span>
<span class="kd">var</span> <span class="nx">polyOut</span> <span class="o">=</span> <span class="nx">countyPrecip</span><span class="p">.</span><span class="nx">select</span><span class="p">([</span><span class="dl">'</span><span class="s1">.*</span><span class="dl">'</span><span class="p">],</span><span class="kc">null</span><span class="p">,</span><span class="kc">false</span><span class="p">);</span>

<span class="c1">// add a new column for year to each feature in the feature collection</span>
<span class="nx">polyOut</span> <span class="o">=</span> <span class="nx">polyOut</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">feature</span><span class="p">){</span>
<span class="k">return</span> <span class="nx">feature</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Year</span><span class="dl">'</span><span class="p">,</span><span class="mi">2017</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// Table to Drive Export Example</span>

<span class="nx">Export</span><span class="p">.</span><span class="nx">table</span><span class="p">.</span><span class="nx">toDrive</span><span class="p">({</span>
  <span class="na">collection</span><span class="p">:</span> <span class="nx">polyOut</span><span class="p">,</span>
  <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GRIDMET_annual_precip_by_county</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">folder</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GEE_geohackweek</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">fileFormat</span><span class="p">:</span> <span class="dl">'</span><span class="s1">CSV</span><span class="dl">'</span>
<span class="p">});</span>   

<span class="c1">// AND HIT 'RUN' IN THE TASKS TAB IN THE UPPER RIGHT PANEL</span></code></pre></figure>

<p>Note on the folder name: If this folder exists within  your Google Drive, GEE will find it and export here regardless of the full file path for the folder. If the folder doesn’t exist, GEE will create it upon export.</p>

<h3 id="comenzar-la-export-task">Comenzar la Export Task</h3>

<p>In order to actually export your data, you have to explicitly hit the “Run” button under the “Tasks” tab in the upper right panel of the code editor. It should take 20-30 seconds to export, depending on GEE user loads.</p>

<p>A new, helpful feature has been added where you can hold your mouse over right side of the completed task and click on the question mark to open a window with details on the task as in the diagram below.</p>

<p><br />
<img src="../fig/04_runTask.png" border="10" width="50%" height="50%" />
<br /><br /></p>

<p>Link to a static version of the full script used in this module:
(https://code.earthengine.google.com/269a0d4a6b9854e6f81ac87187a72559)</p>
:ET