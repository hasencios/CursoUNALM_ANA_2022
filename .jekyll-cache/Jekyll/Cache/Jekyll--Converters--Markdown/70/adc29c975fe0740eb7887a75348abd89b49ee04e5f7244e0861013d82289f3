I":f<h2 id="about-matplotlib">About Matplotlib</h2>

<p><a href="http://matplotlib.org/">Matplotlib</a> is a library that can be used to visualize
data that has been loaded with a library like Pandas, Numpy, or Scipy.
For this tutorial, we’ll use Pandas.</p>

<h2 id="loading-data">Loading Data</h2>

<p>For a more detailed tutorial on loading data, see
<a href="https://github.com/datacarpentry/datacarpentry/blob/master/lessons/python/01-starting-with-data.md">this lesson on beginning with Pandas</a></p>

<p>For now, we’ll just use a simple statement to load the surveys data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'https://ndownloader.figshare.com/files/2292172'</span><span class="p">,</span>
                  <span class="n">index_col</span><span class="o">=</span><span class="s">'record_id'</span><span class="p">)</span>
</code></pre></div></div>

<p>Matplotlib has a wide variety of plots that it can produce. First, we’ll introduce
the simplest of plots: the 2 dimensional line plot.</p>

<p>First, we’ll import matplotlib.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<p>Matplotlib can easily plot a set of data even larger than <code class="language-plaintext highlighter-rouge">surveys.csv</code>, but for
this example, we’ll take the first 50 of the ~35000 entries that are in
<code class="language-plaintext highlighter-rouge">surveys.csv.</code> For a more detailed tutorial on slicing data, see
<a href="https://github.com/datacarpentry/datacarpentry/blob/master/lessons/python/05-masking-and-groups.md">this lesson on masking and grouping</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">small_dataset</span> <span class="o">=</span> <span class="n">df</span><span class="p">[:</span><span class="mi">50</span><span class="p">]</span>
</code></pre></div></div>

<p>There’s a column in <code class="language-plaintext highlighter-rouge">surveys.csv</code> named “site_id” which would make an excellent
value to plot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">site_data</span> <span class="o">=</span> <span class="n">small_dataset</span><span class="p">[</span><span class="s">'site_id'</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="simple-plotting">Simple Plotting</h2>

<p>Now, we have an array of plot data indexed by the <code class="language-plaintext highlighter-rouge">record_id</code> value. Let’s plot it
and give it a label.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">site_data</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'My Data'</span><span class="p">)</span>
</code></pre></div></div>

<p>The data has now been plotted, to see it we can do 2 things:</p>

<ol>
  <li>
    <p>We can interact with the plot by using <code class="language-plaintext highlighter-rouge">plt.show</code> like so:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Or we can save the plot to a file using <code class="language-plaintext highlighter-rouge">plt.savefig</code> like so:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'myplot.png'</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>This would save the file as a rasterized PNG image. The format is deduced from
the file name or can be given explicitly using <code class="language-plaintext highlighter-rouge">format</code> parameter,
eg. <code class="language-plaintext highlighter-rouge">format="png"</code>. For raster images, in order to enhance quality one can also
request particulat resolution in dots per inch using <code class="language-plaintext highlighter-rouge">dpi</code> parameter. This may
be useful when creating quality images for printing/publication. Vectorized
images are supported as well, we just need to save the file as a SVG, EPS or
PDF which is as simple as:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'myplot.pdf'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="plot-essentials">Plot Essentials</h2>

<p>What’s a plot without a title, axis labels, and a legend? These can be easily
set like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Index'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Plot Value'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'The Plot Value From surveys.csv'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="clearing-the-plot">Clearing the Plot</h2>

<p>The plot is created using some default settings, eg. default line color. You
may have noticed, the first line plotted is blue.  We can change this by
replotting the figure. But first, the blue line is still on the plot, so we
must clear it. Like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">clf</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="managing-figures">Managing figures</h2>

<p>It is important to note, that subsequent plots we may have created with
<code class="language-plaintext highlighter-rouge">plt.plot</code>
are (by default) superimposed on the same figure that is created implicitly
upon first <code class="language-plaintext highlighter-rouge">plt.plot</code> call. Figures are numbered from 1 and one can switch
between them by calling <code class="language-plaintext highlighter-rouge">plt.figure(number)</code>. When creating a new figures
one can give a number of options, for example one can fine tune the size and
default resolution by using <code class="language-plaintext highlighter-rouge">figsize</code> and <code class="language-plaintext highlighter-rouge">dpi</code> parameters:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</code></pre></div></div>

<p>which will create a figure 8 inches high and 10 inches wide with resolution of
200 dots per inch.</p>

<p>It is also possible to control the margin between the edge of the axes box and
the edge of the image:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">subplots_adjust</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">bottom</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="mf">0.99</span><span class="p">,</span> <span class="n">top</span><span class="o">=</span><span class="mf">0.99</span><span class="p">)</span>
</code></pre></div></div>

<p>Values are fractions of the image size and denote the position of the
respective edge of the axes bounding box. Lower left corner of the image is at
(0,0). The invocation above leaves 10% margin on the left side, 20% margin on
the bottom and 1% for top and right edges.</p>

<h2 id="managing-styles">Managing styles</h2>

<h3 id="colors">Colors</h3>

<p>To use a different color, like red, we would plot our data like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">site_data</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'r'</span><span class="p">)</span>
</code></pre></div></div>

<p>Note that creating more than one plot on the same figure will make them use
different colors (like in gnuplot) unless specified otherwise. Here’s a list of
predefined colors:</p>

<table>
  <thead>
    <tr>
      <th>Code</th>
      <th>Color</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>b</td>
      <td>blue</td>
    </tr>
    <tr>
      <td>g</td>
      <td>green</td>
    </tr>
    <tr>
      <td>r</td>
      <td>red</td>
    </tr>
    <tr>
      <td>c</td>
      <td>cyan</td>
    </tr>
    <tr>
      <td>m</td>
      <td>magenta</td>
    </tr>
    <tr>
      <td>y</td>
      <td>yellow</td>
    </tr>
    <tr>
      <td>k</td>
      <td>black</td>
    </tr>
    <tr>
      <td>w</td>
      <td>white</td>
    </tr>
  </tbody>
</table>

<p>For more color flexibility, you can specify hexadecimal RGB values like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">site_data</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'#aa5599'</span><span class="p">)</span>
</code></pre></div></div>

<p>or use RGB coefficients of range 0-1 (which makes it easy to create multiple
color-encoded plots in a loop):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plt.plot(site_data, color=(0.1, 0.9, 0.6))
</code></pre></div></div>

<h3 id="line-style">Line style</h3>

<p>The default line style is a solid line. We can make it thinner or thicker by
specifying <code class="language-plaintext highlighter-rouge">linewidth</code> or <code class="language-plaintext highlighter-rouge">lw</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">site_data</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<p>The default linewidth is 1. A linewidth of 3 would be 3 times as thick as the
default. Likewise, a linewidth of .75 would be 3/4 of the thickness of the
default.</p>

<h2 id="other-types-of-plots">Other types of plots</h2>

<p>Matplotlib can do many types of plots. For example, a dot plot can be
constructed like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">site_data</span><span class="p">,</span> <span class="s">'o'</span><span class="p">)</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">o</code> means a dot. There are a variety of markers you can use.
Refer to the official documentation
<a href="http://matplotlib.org/api/markers_api.html#module-matplotlib.markers">for a full list of markers</a></p>

<p>A simple dashed line:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plt.plot(site_data, linestyle='--')
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>Value</th>
      <th>Style</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>’-‘</td>
      <td>solid line (default)</td>
    </tr>
    <tr>
      <td>’–’</td>
      <td>dashed line</td>
    </tr>
    <tr>
      <td>’-.’</td>
      <td>dash-dot line</td>
    </tr>
    <tr>
      <td>’:’</td>
      <td>dotted line</td>
    </tr>
  </tbody>
</table>

<h3 id="marker-style">Marker style</h3>

<p>So far we have plotted only a simple line plot which is default. It is possible
to specify also the data marker style which will create scatter plot or various
connect-the-dots-like plot. For example, to use square data marker:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plt.plot(site_data, marker='s')
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>Marker</th>
      <th>Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>’.’</td>
      <td>point</td>
    </tr>
    <tr>
      <td>‘o’</td>
      <td>circle</td>
    </tr>
    <tr>
      <td>‘v’</td>
      <td>triangle down</td>
    </tr>
    <tr>
      <td>’^’</td>
      <td>triangle up</td>
    </tr>
    <tr>
      <td>’s’</td>
      <td>square</td>
    </tr>
    <tr>
      <td>‘p’</td>
      <td>pentagon</td>
    </tr>
    <tr>
      <td>‘*’</td>
      <td>star</td>
    </tr>
    <tr>
      <td>‘h’</td>
      <td>hexagon</td>
    </tr>
    <tr>
      <td>’+’</td>
      <td>plus</td>
    </tr>
    <tr>
      <td>‘D’</td>
      <td>diamond</td>
    </tr>
  </tbody>
</table>

<h2 id="configuration-of-plot-axes">Configuration of plot axes</h2>

<p>So far we have used a simple, default, uniform axis. The user has, however, a
complete control over the way axes are organized.</p>

<h2 id="plot-range">Plot range</h2>

<p>One can adjust the range of axes using set <code class="language-plaintext highlighter-rouge">plt.xlim</code> for horizontal and
<code class="language-plaintext highlighter-rouge">plt.ylim</code> for vertical axis. For instence to set X limt to [-10; 15] one can
use:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plt.xlim(-10, 15)
</code></pre></div></div>

<h3 id="plot-scale">Plot scale</h3>

<p>In many cases it is useful to use logarithmic scale on one or both axes. One
can use dedicated plot methods:</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">plt.semilogx</code></td>
      <td>logarithmic scaling on X-axis</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">plt.semilogy</code></td>
      <td>logarithmic scaling on Y-axis</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">plt.loglog</code></td>
      <td>logarithmic scaling on both axes (log-log plot)</td>
    </tr>
  </tbody>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">loglog</span><span class="p">(</span><span class="n">site_data</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="two-independent-x-or-y-axes">Two independent X or Y axes</h3>

<p>To create a plot with two X or two Y axes having different scales, units,
ranges one can use <code class="language-plaintext highlighter-rouge">plt.twinx</code> and <code class="language-plaintext highlighter-rouge">plt.twiny</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">site_data</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">site_data</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">twinx</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span> <span class="n">site_data</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'k'</span><span class="p">)</span>
</code></pre></div></div>

<p>This will create a plot with two independent Y axes, one for barplot and one
for line plot of inverse values. Both plots will share the same X-axis.</p>

<h2 id="describing-the-plot">Describing the plot</h2>

<p>In the examples above the plot is not ready to be published. We would like to
add titles, axes labels, tick markers, maybe some grid or legend.</p>

<h3 id="adding-legend">Adding legend</h3>

<p>All plots can be labelled upon creation:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(...,</span> <span class="n">label</span><span class="o">=</span><span class="s">'some description'</span><span class="p">)</span>
</code></pre></div></div>

<p>and a legend can be automatically generated in the automatically chosen <em>best</em>
location:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'best'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="modifying-ticks">Modifying ticks</h3>

<p>One can change the location and labels of the axes ticks using <code class="language-plaintext highlighter-rouge">plt.xticks</code> and
<code class="language-plaintext highlighter-rouge">plt.yticks</code> methods:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span> <span class="c1"># put ticks in given locations of X-axis
</span><span class="n">plt</span><span class="p">.</span><span class="n">yticks</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'C'</span><span class="p">])</span> <span class="c1"># put ticks in given locations on Y-axis, denote them with letters
</span></code></pre></div></div>

<p>Labels can be rotated by adding parameter <code class="language-plaintext highlighter-rouge">rotation=angle_in_degrees</code>. To draw
a grid with grid lines at the ticks use <code class="language-plaintext highlighter-rouge">plt.grid()</code>.</p>

<h3 id="labelling">Labelling</h3>

<p>Axes can be labelled using:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'X-axis label'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Y-axis label'</span><span class="p">)</span>
</code></pre></div></div>

<p>To set a title use</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Plot title'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="plot-variations">Plot variations</h2>

<p>Matplotlib supports a number of different plot variations, eg. bar plot
(<code class="language-plaintext highlighter-rouge">plt.bar</code>), contour plots (<code class="language-plaintext highlighter-rouge">plt.contour</code>), pie chart (<code class="language-plaintext highlighter-rouge">plt.pie</code>), error bars
(<code class="language-plaintext highlighter-rouge">plt.errorbar</code>), polar plot (<code class="language-plaintext highlighter-rouge">plt.polar</code>), …</p>

<p>To use a bar plot:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">site_data</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">site_data</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="go-exploring">Go exploring</h1>

<p>There are excellent examples on <a href="http://matplotlib.org/">Matplotlib</a> website,
especially:</p>

<ul>
  <li><a href="http://matplotlib.org/gallery.html">Matplotlib Gallery</a></li>
  <li><a href="http://wiki.scipy.org/Cookbook/Matplotlib">Scipy Cookbook</a></li>
</ul>

<p>A box and whisker plot:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">site_data</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="a-realistic-example">A Realistic Example</h1>

<p>You may have noticed there’s some more data beyond just the plot value in
<code class="language-plaintext highlighter-rouge">surveys.csv</code>. Let’s plot the plot value and group them by the sex value.
A dot plot would be ideal for this.</p>

<p>Pandas has some built-in tools that make it easy to group your data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">grouped_site_data</span> <span class="o">=</span> <span class="n">small_dataset</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">'sex'</span><span class="p">)</span>
</code></pre></div></div>

<p>This returns our data in an iterable object. Each entry in <code class="language-plaintext highlighter-rouge">grouped_site_data</code>
is formatted like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="s">'group_name'</span><span class="p">,</span> <span class="n">pandas</span> <span class="n">data</span> <span class="n">pertaining</span> <span class="n">to</span> <span class="n">the</span> <span class="n">group</span><span class="p">)</span>
</code></pre></div></div>

<p>Keep in mind we need different colors and labels for each group. So we can plot
the data like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">'r'</span><span class="p">,</span> <span class="s">'g'</span><span class="p">]</span> <span class="c1">#we'll be cycling through these colors
</span><span class="n">color_index</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">grouped_site_data</span><span class="p">:</span>
    <span class="n">color</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="n">color_index</span><span class="p">]</span>
    <span class="n">group_label</span> <span class="o">=</span> <span class="n">group</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">group_data</span> <span class="o">=</span> <span class="n">group</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">group_data</span><span class="p">[</span><span class="s">'site_id'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">group_label</span><span class="p">)</span>
    <span class="n">color_index</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="more-information">More Information</h2>

<p>This is a basic tutorial to get you started using Python to make your graphs.
For more information on Matplotlib, visit the <a href="http://matplotlib.org/">official site</a></p>
:ET